@page "/"
@using GroceryStoreAPI.Model;
@using MudBlazor;
@using MudblazorStore.Data

@inject MudblazorStore.Data.ConsumerService consumerService
@inject MudBlazor.ISnackbar snackBar
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Consumers</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="consumer.task_record.task_name" Label="Task Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="consumer.task_record.due_date" Label="Task Date" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="consumer.task_record.tags.tagName" Label="Tag Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Consumer</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetConsumer()" Filter="SearchByKeyword()" @bind-customer="consumer">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Consumers</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Consumers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Task Name</MudTh>
        <MudTh>Tag Name</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.task_record.task_name</MudTd>
        <MudTd DataLabel="FirstName">@context.task_record.tags.tagName</MudTd>
        <MudTd DataLabel="LastName">@context.task_record.status</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code{
    private bool hover = false;
    private string searchString = "";

    private Consumer consumer = new Consumer();
    private List<Consumer> consumers = new List<Consumer>();
    protected override async Task OnInitializedAsync()
    {
        GetConsumer();
    }
    private List<Consumer> GetConsumer()
    {
        consumers = consumerService.GetConsumer().ToList();
        return consumers;
    }
    private bool Search(Consumer consumer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (consumer.task_record.task_name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || consumer.task_record.tags.tagName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
         || consumer.task_record.status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private List<Consumer> SearchByKeyword()
    {
        List<Consumer> lst_consumer = new List<Consumer>();
        string task_name = string.Empty; string tag = string.Empty;  string status = string.Empty;
        if (string.IsNullOrWhiteSpace(searchString)) return null;
        if (consumer.task_record.task_name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) task_name = searchString;
        else if (consumer.task_record.tags.tagName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) tag = searchString;
        else if (consumer.task_record.status.Contains(searchString, StringComparison.OrdinalIgnoreCase)) status = searchString;
        lst_consumer = consumerService.SearchConsumer(task_name, tag, status);
        return lst_consumer;

    }
    private void Save()
    {
        consumerService.SaveConsumer(consumer);
        consumer = new Consumer();
        snackBar.Add("Consumer Saved.", Severity.Success);
        GetConsumer();
    }
    private void Edit(int id)
    {
        consumer = consumers.FirstOrDefault(c => c.id == id);
    }
    private void Delete(int id)
    {
        consumerService.DeleteConsumer(id);
        snackBar.Add("Consumer Deleted.", Severity.Success);
        GetConsumer();
    }
}